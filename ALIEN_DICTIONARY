//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
// User function Template for C++

class Solution{
    public:
    void dfs(vector<vector<int>> adj, bool visited[], int s, stack<char> &st)
    {
        visited[s]=true;
        for(auto x: adj[s])
        {
            if(visited[x]==false)
            {
                dfs(adj,visited,x,st);
            }
        }
        st.push(s+'a');
    }
    string findOrder(string dict[], int N, int K) {
        vector<vector<int>> adj;
        for(int i=0; i<N-1; i++)
        {
            string s1= dict[i];
            string s2= dict[i+1];
            for(int j=0; j<min(s1.size(),s2.size()); j++)
            {
                if(s1[j]!=s2[j])                                         //first find out edge then add edge
                {
                    adj[s1[j]-'a'].push_back(s2[j]-'a');
                    break;
                }
            }
        }
        string ans=" ";
        stack<char> st;
        bool visited[K]={false};
        for(int i=0; i<K; i++)
        {
            
            if(visited[i]==false)                        // apply topological sort  // TC O(N*S+K)  S= MAXIMUM LENGHT OF STRING SC O(K)
            {
                dfs(adj,visited,i,st);
            }
        }
        while(st.empty()==false)
        {
            ans += st.top();
            st.pop();
        }
        return ans;
    }
};


