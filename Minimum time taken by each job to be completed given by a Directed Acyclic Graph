    void printOrder(int n,vector <int> graph[],vector<int>& job,vector<int> &indegree)
{
    queue<int> q;
    for (int i = 0; i <n; i++) {
        if (indegree[i] == 0) {
            q.push(i);
            job[i] = 1;
        }
    }
    while (!q.empty()) {
        int cur = q.front();
        q.pop();
 
        for (int adj : graph[cur]) {
            indegree[adj]--;
            if (indegree[adj] == 0) {
                job[adj] = job[cur] + 1;
                q.push(adj);
            }
        }
    }
}
        vector<int> minimumTime(int n,vector<vector<int>> &edges,int m)
        {
            
            vector<int> adj[n],indegre(n,0);
            for(auto j:edges)
            {
                adj[j[0]-1].push_back(j[1]-1);
                indegre[j[1]-1]++;
            }
            vector<int> ans(n);
            printOrder(n,adj,ans,indegre);
            return ans;
            
        }
};
// TC O(V+E) SC O(V)
