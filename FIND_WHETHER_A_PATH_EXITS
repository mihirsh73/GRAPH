1- source ,2 = destination, 3= blanck cell 0 = wall
bool dfs(vector<vector<int>> grid, int sx, int sy, int n , int m, vector<vector<bool>>&visited)
    {
        if(sx<0 || sy<0 || sx>=n || sy>=m || grid[sx][sy]==0)
        {
            return false;
        }
        visited[sx][sy]=true;
        if(grid[sx][sy]==2)
        {
            return true;
        }
        return dfs(grid,sx-1,sy,n,m,visited)||
            dfs(grid,sx+1,sy,n,m,visited)||
            dfs(grid,sx,sy-1,n,m,visited)||
            dfs(grid,sx,sy+1,n,m,visited);
            return false;
    }
    bool is_Possible(vector<vector<int>>& grid) 
    {
        int sx,sy,dx,dy;
        vector<vector<bool>> visited(grid.size(),vector<bool>(grid[0].size(), false));           // TC O(N*M) SC O(N*M)
        // memset(visited,false,sizeof(visited));
       for(int i=0; i<grid.size(); i++)
       {
           for(int j=0; j<grid[i].size(); j++)
           {
               if(grid[i][j]==1 && visited[i][j]==false)
               {
                   if(dfs(grid,i,j,grid.size(),grid[0].size(),visited)==true)
                   {
                       return true;
                   }
               }
               
           }
       }
       return false;
       
    }
